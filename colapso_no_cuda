#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include <time.h> 
#include <string.h>
#define order 3
float coefficient_adelantada[order];
float coefficient_centrada[order];
float coefficient_atrasada[order];
float b_i[4];
float c_i[4];
float a_ij[4];

void guardar_salida_phi(float *data,int Nr, int T) {
  FILE *fp = fopen("campo_escalar_2.dat", "wb");
  fwrite(data, sizeof(float), Nr*T, fp);
  fclose(fp);
}
void guardar_salida_alpha(float *data,int Nr, int T) {
  FILE *fp = fopen("campo_escalar_lapso.dat", "wb");
  fwrite(data, sizeof(float), Nr*T, fp);
  fclose(fp);}
void guardar_salida_chi(float *data,int Nr, int T) {
  FILE *fp = fopen("dr_campo_escalar.dat", "wb");
  fwrite(data, sizeof(float), Nr*T, fp);
  fclose(fp);
}
void cargar_coeff_centradas_df(float *data, int N){

  FILE *arch;
  arch=fopen("coeff_det_centrada.npy","rb");
  if (arch==NULL)
      exit(1);
  fread( data , sizeof(float) , N , arch );
  fclose(arch);

}
void cargar_coeff_atrasada_df(float *data, int N){

  FILE *arch;
  arch=fopen("coeff_det_atrasada.npy","rb");
  if (arch==NULL)
      exit(1);
  fread( data , sizeof(float) , N , arch );
  fclose(arch);

}
void cargar_coeff_adelantada_df(float *data, int N){

  FILE *arch;
  arch=fopen("coeff_det_adelantada.npy","rb");
  if (arch==NULL)
      exit(1);
  fread( data , sizeof(float) , N , arch );
  fclose(arch);

}

void difference_tenth(float *df, float *f, float h, int N){
  float temp;

  for(int idx=0; idx<N;idx++){
    temp=0.0;
    if (idx<order){
      for (int m=0;m<order;m++){
        temp += coefficient_adelantada[m]*f[idx+m];
      }
      df[idx]=temp/h; 
    }
    else if (idx > N-order+1){
      for (int m=-order+1;m<1;m++){
        temp += coefficient_atrasada[-m]*f[idx+m];
      }
      df[idx]=temp/h;
    }
    else{
      for (int m=0;m<order;m++){
        temp += coefficient_centrada[m]*f[idx-(int)(order-1)/2+m];
      }
      df[idx]=temp/h;
    }
  }
}
float difference_tenth_RK( float *f,float *Kf, float *a_ij, int idx,int s, float h, int Nr){
  float temp ;
  temp=0;

    if (idx<order){
      for (int m=0;m<order;m++){
        temp += coefficient_adelantada[m]*(f[idx+m] + a_ij[s]*Kf[(s)*Nr+idx]);
      }
    }
    else if (idx > Nr-order+1){
      for (int m=-order+1;m<1;m++){
        temp += coefficient_atrasada[-m]*(f[idx+m] + a_ij[s]*Kf[(s)*Nr+idx+m]);
      }
    }
    else{
      for (int m=0;m<order;m++){
        temp += coefficient_centrada[m]*(f[idx-(int)(order-1)/2+m] + a_ij[s]*Kf[(s)*Nr+idx-(int)(order-1)/2+m]);
      }
    }
    return temp/h;
}

float Kb_dot( float Kb, float K, float A,float B, float alpha, float Db, float Da,
  float lambda, float U, float rho, float S_A,float dr_Db, float dr, int idx, int Nr, int t){
    float epsilon=0.03;
    float rs;
    if (t==0){
      return 0.0;
    }
    else{
      float func,func_1,func_2,func_3;
      if (idx==0){
      rs=idx*dr+epsilon;}
      else{
      rs=idx*dr;
      }
      func_1 = 0.5 * U + 2.0 * lambda * B / A - Db - lambda - Da;
      func_2 = -0.5 * Da * Db - 0.5*dr_Db + 0.25*Db*(U + 4.0*lambda*B/A) +A*K*Kb;
      func_3 = S_A - rho;

      func= alpha/(A * rs)*func_1 + alpha/A*func_2 + alpha/(2.0)*func_3;
      return func;
    }
 }

float K_dot( float K, float Kb, float A,float B, float alpha, float Db, float Da,
  float lambda, float U, float rho, float S_A, float S_B, float dr_Da, float dr, int idx, int Nr, int t){
    float epsilon=0.03;
    float rs;
    if (t==0){
      return 0.0;
    }
    else{
      float func,func_1,func_2,func_3;
      if (idx==0){
        rs=idx*dr+epsilon;}
      else{
        rs=idx*dr;
      }
      func_1 = K*K - 4.0*K*Kb + 6.0*Kb*Kb;
      func_2 = Da*Da + dr_Da + 2.0*Da/rs - 0.5*Da*(U + 4.0*lambda*B/A);
      func_3 = rho + S_A + 2.0*S_B;

      func= alpha*func_1 - alpha/A*func_2 + alpha/(2.0)*func_3;
      return func;
    }
}

float lambda_dot( float lambda, float Kb, float K,float A, float B, float alpha, float Db,
  float ja,float dr_Kb, float dr, int idx, int Nr, int t){
  float epsilo=0.003;
  if(t==0){
    return (1.0-A/B)/(idx*dr+epsilo);
  }
  else{
    float func;


    func= 2.0*alpha*A/B*(dr_Kb - 0.5*Db*( K - 3.0*Kb ) + 0.5*ja);


    return func;  
    }
  }

float U_dot( float U, float Kb, float K,float A, float B, float alpha, float Db,
  float Da, float lambda, float ja, float dr_K, float dr_A,  float dr, float dt, int Nr, int t){

  if(t==0){
    return (dr_A-4.0*lambda)/A;
  }
  else{
    float func,func_1,func_2,func_3;
    func_1 = dr_K + Da*(K - 4.0*Kb);
    func_2 = 2.0*(K -3.0*Kb)*(Db - 2.0*lambda*B/A);
    func_3 = 4.0*alpha*ja;

    func= -2.0*alpha * (func_1 - func_2) - func_3;
    return func; 
  }
}

float A_dot( float A, float K, float Kb, float alpha, float dt, int Nr){

    float func;

    func= -2.0*alpha*A*(K - 2.0*Kb);

    return func; 
}

float B_dot( float B,float Kb, float alpha, float dt, int Nr){

  return -2.0*alpha*B*Kb; 
}

float f_Db(float *alpha, float *Kb,float *K_a,float *K_Kb, float *a_ij,float dt, int idx, int s,int Nr,int t){
  return (alpha[(t-1)*Nr + idx]+dt*a_ij[s]*K_a[(s)*Nr + idx])*(Kb[idx]+dt*a_ij[s]*K_Kb[(s)*Nr + idx]); ;
  }
float Db_dot(float *Kb, float *alpha,float *K_a,float *K_Kb,  float *a_ij,float dt, float dr, int idx, int s,int Nr,int t){
  float temp;
  temp=0.0;

  if (idx<order){
    for (int m=0;m<order;m++){
      
      temp += coefficient_adelantada[m]*f_Db(alpha,Kb,K_a,K_Kb,a_ij,dt,idx,s,Nr,t);
    }
    
  }
  else if (idx > Nr-order+1){
    for (int m=-order+1;m<1;m++){
      temp += coefficient_atrasada[-m]*f_Db(alpha,Kb,K_a,K_Kb,a_ij,dt,idx+m,s,Nr,t );
    }
  }
  else{
    for (int m=0;m<order;m++){
      temp += coefficient_centrada[m]*f_Db(alpha,Kb,K_a,K_Kb,a_ij,dt,idx-(int)(order-1)/2+m,s,Nr,t);
    }
  }
      return -1.0*temp/dr; ;
  }

float alpha_dot( float alpha,float K,  float dt, int Nr){
    return -alpha*K;
}

float Da_dot( float Da, float dr_K, float dt, int Nr,int t){
      return -dr_K;
}
void calculate_rho(float *rho,float *PI,float *chi, float *A, float *B, int Nr){
  for(int idx=0;idx<Nr;idx++){
    rho[idx] = (PI[idx]*PI[idx] / (B[idx]*B[idx]) + chi[idx]*chi[idx])/(2.0*A[idx]);}

}
void calculate_ja(float *ja, float *PI, float *chi, float *A, float *B, int Nr){
  for(int idx=0;idx<Nr;idx++){

    ja[idx] = -PI[idx]*chi[idx] / (sqrt(A[idx])*B[idx]);}

}
void calculate_SA(float *SA, float *PI, float *chi, float *A, float *B, int Nr){
  for(int idx=0;idx<Nr;idx++){
    SA[idx] = (PI[idx]*PI[idx] / (B[idx]*B[idx]) + chi[idx]*chi[idx])/(2.0*A[idx]);}

}
void calculate_SB(float *SB, float *PI, float *chi, float *A, float *B, int Nr ){
  for(int idx=0;idx<Nr;idx++){

  SB[idx] = (PI[idx]*PI[idx] / (B[idx]*B[idx]) - chi[idx]*chi[idx])/(2.0*A[idx]);}

}


float phi_evolution(float pi, float A, float B, float alpha, float dt, int Nr, int t){
    return pi * alpha/(sqrt(A)*B);;
}
float f_chi(float *A, float *B, float *alpha, float *PI,float *K_A,
  float *K_a,float *K_B,float *K_PI, float *a_ij, float dt, int idx, int s,int Nr,int t){
  return (alpha[(t-1)*Nr+idx]+dt*a_ij[s]*K_a[(s)*Nr + idx])*(PI[idx]+dt*a_ij[s]*K_PI[(s)*Nr + idx])
  /(sqrt(A[idx]+dt*a_ij[s]*K_A[(s)*Nr + idx])*(B[idx]+dt*a_ij[s]*K_B[(s)*Nr + idx]));
  }

float chi_evolution( float *chi, float *A, float *B, float *alpha, float *PI,float *K_A,
  float *K_a,float *K_B,float *K_PI, float *a_ij, int idx, int s, float dt, float dr, int Nr,int t){
  float temp;
  temp=0.0;

  if (idx<order){
    for (int m=0;m<order;m++){
      
      temp += coefficient_adelantada[m]*f_chi(A,B,alpha,PI,K_A,K_a,K_B,K_PI,a_ij,dt,idx,s,Nr,t);
    }
    
  }
  else if (idx > Nr-order+1){
    for (int m=-order+1;m<1;m++){
      temp += coefficient_atrasada[-m]*f_chi(A,B,alpha,PI,K_A,K_a,K_B,K_PI,a_ij,dt,idx+m,s,Nr,t );
    }
  }
  else{
    for (int m=0;m<order;m++){
      temp += coefficient_centrada[m]*f_chi(A,B,alpha,PI,K_A,K_a,K_B,K_PI,a_ij,dt,idx-(int)(order-1)/2+m,s,Nr,t);
    }
  }
      return temp/dr; ;
  }

float f_PI(float *A, float *B, float *alpha, float *chi,float *K_A,
    float *K_a,float *K_B,float *K_chi, float *a_ij, int idx, int s, float dt,float dr,int Nr,int t){
    float r2;
    float epsilon=0.03;

    r2=idx*dr*idx*dr;
    return  (alpha[(t-1)*Nr+idx]+dt*a_ij[s]*K_a[(s)*Nr + idx])*(B[idx]+dt*a_ij[s]*K_B[(s)*Nr + idx])*(chi[idx]+dt*a_ij[s]*K_chi[(s)*Nr + idx])*r2
            /(sqrt(A[idx]+dt*a_ij[s]*K_A[(s)*Nr + idx]));
    }
float PI_evolution( float *PI, float *A, float *B, float *alpha, float *chi,float *K_A,
  float *K_a,float *K_B,float *K_chi, float *a_ij, int idx, int s, float dt, float dr, int Nr,int t){
  float temp;
  float epsilon=0.01;

  temp=0.0;
  if (idx<order){
    for (int m=0;m<order;m++){
      
      temp += coefficient_adelantada[m]*f_PI(A,B,alpha,chi,K_A,K_a,K_B,K_chi,a_ij,idx,s,dt,dr,Nr,t);
    } 
      return temp/dr*(1.0/(idx*dr*idx*dr+epsilon));

  }
  else if (idx > Nr-order+1){
    for (int m=-order+1;m<1;m++){
      temp += coefficient_atrasada[-m]*f_PI(A,B,alpha,chi,K_A,K_a,K_B,K_chi,a_ij,idx+m,s,dt,dr,Nr,t);
    }
      return temp/dr*(1.0/(idx*dr*idx*dr));

  }
  else{
    for (int m=0;m<order;m++){
      temp += coefficient_centrada[m]*f_PI(A,B,alpha,chi,K_A,K_a,K_B,K_chi,a_ij,idx-(int)(order-1)/2+m,s,dt,dr,Nr,t);
    }
      return temp/dr*(1.0/(idx*dr*idx*dr));

  }
}
void inicial_phi(float *phi, float dr,int Nr){
  float a=1.2;
  float std=1.5;
  for (int i=0;i<Nr;i++){
    //phi[i]=a;
    phi[i]=a*exp(-( (i*dr-25.0) /std)*((i*dr-25.0) /std));
  }
 }
void iniciar_A(float *A,float *chi, float dr,int Nr){
  float *ks;
  ks=(float *)malloc(sizeof(float)*5);
  float sumas=0.0;
  float A0,rs;
  float epsilon=0.01;
  A[0]=1.0;
  ks[0]=0.0;
  for (int idx=1;idx<Nr;idx++){
    sumas=0.0;
    for (int s=0 ; s<4 ;s++){
      A0=(A[idx-1]+dr*a_ij[s]*ks[s]);
      if (idx-1==0){
        rs= dr*(idx-1)+dr*c_i[s] + epsilon;
      }
      else{
        rs= dr*(idx-1)+dr*c_i[s];
      }
      ks[s+1]= A0*((1.0/rs)*(1.0-A0)+rs*chi[idx-1]*chi[idx-1]*0.5 + 0.0);
      sumas += b_i[s]*ks[s+1];
    }
   A[idx]=A[idx-1]+dr*sumas;
  }
}
void rellenar(float *f, int Nr,float num){
  for (int i=0;i<Nr;i++){
    f[i]=num;
  }
}

int main(){
  int Nr=5000;
  int Nt=10000;
  // Defino los array del host
  float *A,*B,*alpha,*phi,*chi,*PI,*lambda,*K,*Kb,*U, *Da, *Db;
  float *rho,*ja,*SA,*SB;
  //float *K_s,*b_i, *a_ij, *c_i;
  float *coef_atrasada,*coef_centrada,*coef_adelantada;

  //deltas
  float dr=100.0/Nr;
  float dt=dr/10000;
  printf("dr=%f , dt=%f",dr,dt);
// mallocs
phi=(float *)malloc(Nt*Nr*sizeof(float));
alpha=(float *)malloc(Nt*Nr*sizeof(float));


  PI=(float *)malloc(Nr*sizeof(float));
  chi=(float *)malloc(Nr*sizeof(float));

  A=(float *)malloc(Nr*sizeof(float));
  B=(float *)malloc(Nr*sizeof(float));
  lambda=(float *)malloc(Nr*sizeof(float));
  K=(float *)malloc(Nr*sizeof(float));
  Kb=(float *)malloc(Nr*sizeof(float));
  U=(float *)malloc(Nr*sizeof(float));
  Db=(float *)malloc(Nr*sizeof(float));
  Da=(float *)malloc(Nr*sizeof(float));

  ja=(float *)malloc(Nr*sizeof(float));
  rho=(float *)malloc(Nr*sizeof(float));
  SA=(float *)malloc(Nr*sizeof(float));
  SB=(float *)malloc(Nr*sizeof(float));


  coef_centrada=(float *)malloc(order*sizeof(float));
  coef_atrasada=(float *)malloc(order*sizeof(float));
  coef_adelantada=(float *)malloc(order*sizeof(float));



  b_i[0]=1.0/6.0;b_i[1]=1.0/3.0;b_i[2]=1.0/3.0;b_i[3]=1.0/6.0;
  a_ij[0]=0.0;a_ij[1]=0.5;a_ij[2]=0.5;a_ij[3]=1.0;
  c_i[0]=0.0;c_i[1]=0.5;c_i[2]=0.5;c_i[3]=1.0;

cargar_coeff_centradas_df(coef_centrada,order);
cargar_coeff_atrasada_df(coef_atrasada,order);
cargar_coeff_adelantada_df(coef_adelantada,order);
for (int i=0; i < order ;i++){
  coefficient_centrada[i]=coef_centrada[i];
  coefficient_adelantada[i]=coef_adelantada[i];
  coefficient_atrasada[i]=coef_atrasada[i];
}
printf("Diferencias finitas: check\n");

//condiciones iniciales
inicial_phi(phi,dr,Nr);
difference_tenth(chi,phi,dr,Nr); 
printf("Condiciones iniciales de phi y chi: check\n");
rellenar(PI, Nr, 0.0);
rellenar(K,Nr,0.0);
rellenar(Kb,Nr,0.0);
rellenar(Da,Nr,0.0);
rellenar(Db,Nr,0.0);
rellenar(alpha, Nr, 1.0);
rellenar(B,Nr,1.0);
iniciar_A(A,chi,dr,Nr);
printf("Condiciones iniciales parte 2: check\n");
guardar_salida_chi(A,Nr,1);

calculate_rho(rho,PI,chi,A,B,Nr);
calculate_SA(SA,PI,chi,A,B,Nr);
calculate_SB(SB,PI,chi,A,B,Nr);
calculate_ja(ja,PI,chi,A,B,Nr);
printf("Valores iniciales de Tuv: check\n");
float *dr_A0;
dr_A0=(float *)malloc(Nr*sizeof(float));
difference_tenth(dr_A0,A,dr,Nr);
for(int idx=0;idx<Nr;idx++){

  lambda[idx]=lambda_dot( lambda[idx], Kb[idx] , K[idx], A[idx], B[idx], alpha[idx], Db[idx], ja[idx],0.0, dr, dt, Nr, 0);
  U[idx]=U_dot( U[idx], Kb[idx] , K[idx] , A[idx] , B[idx] ,  alpha[idx] , Db[idx] ,Da[idx],  lambda[idx] , ja[idx],0.0,dr_A0[idx], dr, dt, Nr, 0);
  printf("r : %d\n",idx);
  printf("U : %.15f\n",U[idx]);
  printf("lambda : %.15f\n",lambda[idx]);
}
//pendiente inicial del A...
// cuda mallocs

printf("Condiciones iniciales: check\n");

float *K1,*K2,*K3,*K4,*K5,*K6,*K7,*K8,*K9,*K10,*K11,*K12;
int stage=4,num_ecu=9;
float dr_Db, dr_Da, dr_K,dr_Kb,dr_A;
//dr_Db = (float *)malloc(Nr*sizeof(float));
//dr_Da = (float *)malloc(Nr*sizeof(float));
//dr_K = (float *)malloc(Nr*sizeof(float));
//dr_Kb = (float *)malloc(Nr*sizeof(float));
//dr_temp = (float *)malloc(Nr*sizeof(float));


//El U y lambda son los unicos que no aparecen en derivadas
//es necesario que cada K tenga dimensiones  [ stage x Nr ]
//para hacer las diferencias finitas.

K1=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K2=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K3=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K4=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K5=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K6=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K7=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K8=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K9=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K10=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K11=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);
K12=(float*)malloc(sizeof(float)*( stage + 1 )*Nr);

for(int t=1;t<Nt;t++){
  calculate_rho(rho,PI,chi,A,B,Nr);
  calculate_SA(SA,PI,chi,A,B,Nr);
  calculate_SB(SB,PI,chi,A,B,Nr);
  calculate_ja(ja,PI,chi,A,B,Nr);
  for(int idx=0;idx<Nr;idx++){    
    phi[t*Nr + idx] = phi[(t-1)*Nr + idx];
    alpha[t*Nr + idx] = alpha[(t-1)*Nr + idx];
    }
  for(int s=0 ; s < stage ; s++){
    for(int idx=0;idx<Nr;idx++){
      if (s==0){
        K1[idx]=0.0;K2[idx]=0.0;K3[idx]=0.0;K4[idx]=0.0;
        K5[idx]=0.0;K6[idx]=0.0;K7[idx]=0.0;K8[idx]=0.0;
        K9[idx]=0.0;K10[idx]=0.0;K11[idx]=0.0;K12[idx]=0.0;
      }
      dr_Db=difference_tenth_RK( Db, K2,a_ij, idx,s, dr,Nr); 
      dr_Da=difference_tenth_RK( Da, K4,a_ij, idx,s, dr,Nr); 
      dr_K=difference_tenth_RK(K, K6,a_ij, idx,s, dr,Nr); 
      dr_Kb=difference_tenth_RK(Kb, K5,a_ij, idx,s, dr,Nr);
      dr_A=difference_tenth_RK(A, K9,a_ij, idx,s, dr,Nr);
      K1[ (s+1)*Nr + idx ]=B_dot( B[idx] + dt*a_ij[s]*K1[s*Nr +idx], Kb[idx] + dt*a_ij[s]*K5[s*Nr +idx], alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr +idx], dt, Nr);
      K2[ (s+1)*Nr + idx ]=Db_dot(Kb , alpha,K5,K3,a_ij, dt,dr,idx,s, Nr, t);
      K3[ (s+1)*Nr + idx ]=alpha_dot( alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr +idx], K[idx] + dt*a_ij[s]*K6[s*Nr +idx], dt, Nr);
      K4[ (s+1)*Nr + idx ]=Da_dot( Da[idx] + dt*a_ij[s]*K4[s*Nr +idx], dr_K, dt, Nr,t);
      K5[ (s+1)*Nr + idx ]=Kb_dot( Kb[idx] + dt*a_ij[s]*K5[s*Nr +idx], K[idx] + dt*a_ij[s]*K6[s*Nr +idx], A[idx] + dt*a_ij[s]*K9[s*Nr +idx], B[idx] + dt*a_ij[s]*K1[s*Nr +idx], alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr +idx], Db[idx] + dt*a_ij[s]*K2[s*Nr +idx], Da[idx] + dt*a_ij[s]*K4[s*Nr +idx], lambda[idx] + dt*a_ij[s]*K7[s*Nr +idx], U[idx] + dt*a_ij[s]*K8[s*Nr +idx],rho[idx], SA[idx],dr_Db, dr, idx, Nr, t);
      K6[ (s+1)*Nr + idx ]=K_dot( K[idx] + dt*a_ij[s]*K6[s*Nr +idx], Kb[idx] + dt*a_ij[s]*K5[s*Nr +idx], A[idx] + dt*a_ij[s]*K9[s*Nr +idx], B[idx] + dt*a_ij[s]*K1[s*Nr +idx], alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr +idx], Db[idx] + dt*a_ij[s]*K2[s*Nr +idx], Da[idx] + dt*a_ij[s]*K4[s*Nr +idx], lambda[idx] + dt*a_ij[s]*K7[s*Nr +idx], U[idx] + dt*a_ij[s]*K8[s*Nr +idx] , rho[idx], SA[idx], SB[idx],dr_Da, dr, idx, Nr, t);
      K7[ (s+1)*Nr + idx ]=lambda_dot( lambda[idx] + dt*a_ij[s]*K7[s*Nr +idx], Kb[idx] + dt*a_ij[s]*K5[s*Nr +idx], K[idx] + dt*a_ij[s]*K6[s*Nr +idx], A[idx] + dt*a_ij[s]*K9[s*Nr +idx], B[idx] + dt*a_ij[s]*K1[s*Nr +idx], alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr +idx], Db[idx] + dt*a_ij[s]*K2[s*Nr +idx], ja[idx], dr_Kb, dr, dt, Nr, t);
      K8[ (s+1)*Nr + idx ]=U_dot( U[idx] + dt*a_ij[s]*K8[s*Nr +idx], Kb[idx] + dt*a_ij[s]*K5[s*Nr +idx], K[idx] + dt*a_ij[s]*K6[s*Nr +idx], A[idx] + dt*a_ij[s]*K9[s*Nr +idx], B[idx] + dt*a_ij[s]*K1[s*Nr +idx],  alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr +idx], Db[idx] + dt*a_ij[s]*K2[s*Nr +idx], Da[idx] + dt*a_ij[s]*K4[s*Nr +idx],  lambda[idx] + dt*a_ij[s]*K7[s*Nr +idx],  ja[idx],dr_K,dr_A, dr, dt, Nr, t);
      K9[ (s+1)*Nr + idx ]=A_dot( A[idx] + dt*a_ij[s]*K9[s*Nr +idx], alpha[(t-1)*Nr+idx] +dt*a_ij[s]*K3[s*Nr +idx],K[idx] + dt*a_ij[s]*K6[s*Nr +idx],Kb[idx] + dt*a_ij[s]*K5[s*Nr +idx], dt, Nr);
    
      K10[ (s+1)*Nr + idx ]=PI_evolution(PI,A,B,alpha,chi,K9,K3,K1,K10,a_ij, idx, s, dt, dr, Nr,t);
      K11[ (s+1)*Nr + idx ]=chi_evolution(chi,A,B,alpha,PI,K9,K3,K1,K10,a_ij, idx, s, dt, dr, Nr,t);
      K12[ (s+1)*Nr + idx ]=phi_evolution(PI[idx] + dt*a_ij[s]*K10[s*Nr+idx],A[idx] + dt*a_ij[s]*K9[s*Nr+idx],B[idx] + dt*a_ij[s]*K1[s*Nr+idx],alpha[(t-1)*Nr+idx] + dt*a_ij[s]*K3[s*Nr+idx],dt, dr, Nr);

      K1[idx] += dt *( b_i[s] * K1[(s+1)*Nr+idx]);
      K2[idx] += dt *( b_i[s] * K2[(s+1)*Nr+idx]);
      K3[idx] += dt *( b_i[s] * K3[(s+1)*Nr+idx]);
      K4[idx] += dt *( b_i[s] * K4[(s+1)*Nr+idx]);
      K5[idx] += dt *( b_i[s] * K5[(s+1)*Nr+idx]);
      K6[idx] += dt *( b_i[s] * K6[(s+1)*Nr+idx]);
      K7[idx] += dt *( b_i[s] * K7[(s+1)*Nr+idx]);
      K8[idx] += dt *( b_i[s] * K8[(s+1)*Nr+idx]);
      K9[idx] += dt *( b_i[s] * K9[(s+1)*Nr+idx]);

      K10[idx] += dt *( b_i[s] * K10[(s+1)*Nr+idx]);
      K11[idx] += dt *( b_i[s] * K11[(s+1)*Nr+idx]);
      K12[idx] += dt *( b_i[s] * K12[(s+1)*Nr+idx]);
    }
  }

    for(int idx=0;idx<Nr;idx++){ 
      B[idx]          +=K1[idx];
      Db[idx]         +=K2[idx];
      alpha[t*Nr+idx] +=K3[idx];
      Da[idx]         +=K4[idx];
      Kb[idx]         +=K5[idx];
      K[idx]          +=K6[idx];
      lambda[idx]     +=K7[idx];
      U[idx]          +=K8[idx];
      A[idx]          +=K9[idx];

      PI[idx]         +=K10[idx];
      chi[idx]        +=K11[idx];
      phi[t*Nr + idx] +=K12[idx];
    /*if (idx==Nr-1 && t%1==0){
    printf("t : %d\n",t);
    printf("r : %d\n",idx);

    printf("alpha : %.15f\n",alpha[t*Nr+idx]);
    printf("phi : %.15f\n",phi[t*Nr+idx]);
    printf("PI : %.15f\n",PI[idx]);
    printf("chi : %.15f\n",chi[idx]);

    printf("A : %.15f\n",A[idx]);
    printf("B : %.15f\n",B[idx]);
    printf("K : %.15f\n",K[idx]);
    printf("KB : %.15f\n",Kb[idx]);
    printf("DB : %.15f\n",Db[idx]);
    printf("Da : %.15f\n",Da[idx]);
    printf("U : %.15f\n",U[idx]);
    printf("lambda : %.15f\n",lambda[idx]);
    printf("rho : %.15f\n",rho[idx]);
    printf("ja : %.15f\n",ja[idx]);
    printf("SA : %.15f\n",SA[idx]);
    printf("SB : %.15f\n",SB[idx]);}*/}
      
}
printf("Runge-Kutta: check\n");


guardar_salida_phi(phi,Nr,Nt);

guardar_salida_alpha(alpha,Nr,Nt);








  free(phi);free(chi);free(PI);free(K);free(Kb);free(U);free(A);free(B);free(alpha);free(lambda);

}
